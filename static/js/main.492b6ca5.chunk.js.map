{"version":3,"sources":["components/nabvar.js","components/banner.js","components/mint.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","useState","sticky","setSticky","useEffect","window","addEventListener","handleScroll","scrollY","className","Navbar","variant","expand","style","backgroundColor","Brand","href","Nav","Link","onClick","scrollTo","src","alt","Toggle","aria-controls","Collapse","id","target","rel","loading","width","Banner","contractABI","require","Mint","createAlchemyWeb3","process","eth","Contract","walletAddress","show","setShow","status","supply","handleClose","handleShow","a","onMintPressed","connectWalletPressed","height","Button","length","String","substring","Modal","onHide","Header","closeButton","Title","Body","maxWidth","Form","Label","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6qQAkDeA,EA5CI,WAAO,IAAD,EACKC,oBAAS,GADd,mBAChBC,EADgB,KACRC,EADQ,KAGvBC,qBAAU,WACRC,OAAOC,iBAAiB,SAAUC,KACjC,IAEH,IAAMA,EAAe,WACfF,OAAOG,SAAW,GACpBL,GAAU,GACDE,OAAOG,QAAU,IAC1BL,GAAU,IAId,OACE,qBAAKM,UAAS,gBAAWP,EAAS,UAAY,IAA9C,SACE,eAACQ,EAAA,EAAD,CAAQC,QAAQ,OAAOC,OAAO,KAAKC,MAAO,CAACC,gBAAiB,WAA5D,UACE,cAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,IAAIP,UAAU,OAAjC,SAEE,cAACQ,EAAA,EAAIC,KAAL,CAAUF,KAAK,QAAQP,UAAU,0BAA0BU,QAAS,kBAAMd,OAAOe,SAAS,EAAG,IAA7F,SAAiG,qBAAKC,IAAI,oBAAoBZ,UAAU,WAAWa,IAAI,SAEzJ,cAACZ,EAAA,EAAOa,OAAR,CAAeC,gBAAc,mBAAmBf,UAAU,SAC1D,cAACC,EAAA,EAAOe,SAAR,CAAiBC,GAAG,mBAAmBjB,UAAU,oCAAjD,SACE,eAACQ,EAAA,EAAD,CAAKR,UAAU,sBAAf,UAGE,cAACQ,EAAA,EAAIC,KAAL,CAAUF,KAAK,QAAQP,UAAU,0BAAjC,kBAGA,sBAAKA,UAAU,uCAAf,UACE,mBAAGO,KAAK,mCAAmCW,OAAO,SAASlB,UAAU,iCAAiCmB,IAAI,aAA1G,SACE,qBAAKP,IAAI,yDAAyDQ,QAAQ,OAAOC,MAAM,KAAKR,IAAI,OAElG,mBAAGN,KAAK,gCAAgCW,OAAO,SAASlB,UAAU,iCAAiCmB,IAAI,aAAvG,SACE,qBAAKP,IAAI,yDAAyDQ,QAAQ,OAAOC,MAAM,KAAKR,IAAI,qBC/BjGS,EARA,WACb,OACE,qBAAKtB,UAAU,SAAf,SACE,qBAAKY,IAAI,sBAAsBC,IAAI,Q,mDCGnCU,EAAcC,EAAQ,KAiKbC,GA7JE,KADJC,EADiBF,EAAQ,KAA9BE,mBAHWC,yEAKOC,IAAIC,UAASN,EAHf,8CA4BX,WAAO,IAAD,EACkB/B,mBAAS,IAD3B,mBACVsC,EADU,aAEOtC,oBAAS,IAFhB,mBAEVuC,EAFU,KAEJC,EAFI,OAGqBxC,mBAAS,GAH9B,gCAIWA,mBAAS,KAJpB,mBAIVyC,EAJU,aAMWzC,mBAAS,IANpB,mBAMV0C,EANU,KAQXC,GARW,KAQG,kBAAMH,GAAQ,KAG5BI,EAAU,uCAAG,sBAAAC,EAAA,sDACjBL,GAAQ,GADS,2CAAH,qDAeVM,EAAa,uCAAG,sBAAAD,EAAA,0FAAH,qDA+BnB,IAAME,EAAoB,uCAAG,sBAAAF,EAAA,0FAAH,qDAK1B,OACE,sBAAKrC,UAAU,6BAAf,UACE,qBAAKA,UAAU,0CAA0CiB,GAAG,OAA5D,kBAGA,sBAAKjB,UAAU,aAAf,UACE,qBAAKA,UAAU,qCAAf,wBAGA,qBAAKA,UAAU,wCAAf,sDAGA,qBAAKA,UAAU,eAAf,SACE,qBAAKY,IAAI,iBAAiBC,IAAI,GAAGQ,MAAM,MAAMmB,OAAO,UAEtD,qBAAKxC,UAAU,yBAAf,SACE,cAACyC,EAAA,EAAD,CAAQzC,UAAU,mBAAmBU,QAAS6B,EAA9C,SACGT,EAAcY,OAAS,EAEtBC,OAAOb,GAAec,UAAU,EAAG,GACnC,MACAD,OAAOb,GAAec,UAAU,IAE9B,+CAKR,sBAAK5C,UAAU,qCAAf,UACGkC,EADH,oBAGA,qBAAKlC,UAAU,cAAf,SACE,cAACyC,EAAA,EAAD,CAAQzC,UAAU,wBAAwBU,QAAS0B,EAAnD,uBAKJ,eAACS,EAAA,EAAD,CAAOd,KAAMA,EAAMe,OAAQX,EAA3B,UACE,cAACU,EAAA,EAAME,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACH,EAAA,EAAMI,MAAP,sCAEF,eAACJ,EAAA,EAAMK,KAAP,WACE,qBAAKtC,IAAI,iBAAiBC,IAAI,GAAGT,MAAO,CAAC+C,SAAU,WACnD,qBAAKnD,UAAU,cAAf,SAEE,eAACoD,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,MAAN,IAGCpB,EAAS,8BAAMA,IACZ,gCAOV,eAACY,EAAA,EAAMS,OAAP,WAEM,cAACb,EAAA,EAAD,CAAQvC,QAAQ,UAAUQ,QAAS4B,EAAnC,kBAEJ,cAACG,EAAA,EAAD,CAAQvC,QAAQ,YAAYQ,QAASyB,EAArC,8B,4BCxIKoB,MAbf,WACE,OACE,eAAC,WAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCJSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.492b6ca5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Navbar,\r\n  Nav \r\n} from \"react-bootstrap\";\r\n \r\nconst Navigation = () => { \r\n  const [sticky, setSticky] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n  }, []);\r\n\r\n  const handleScroll = () => {\r\n    if (window.scrollY >= 86) {\r\n      setSticky(true);\r\n    } else if (window.scrollY < 85) {\r\n      setSticky(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`header${sticky ? ' sticky' : ''}`}>\r\n      <Navbar variant=\"dark\" expand=\"md\" style={{backgroundColor: '#333333'}}>\r\n        <Navbar.Brand href=\"/\" className=\"px-4\">\r\n          \r\n          <Nav.Link href=\"#home\" className=\"cus-nav-link text-white\" onClick={() => window.scrollTo(0, 0)}><img src=\"./images/logo.png\" className=\"logo-img\" alt=\"\"/></Nav.Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" className=\"mx-4\"/>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\" className=\"d-md-flex justify-content-between\">\r\n          <Nav className=\"mr-auto flex-grow-1\">                               \r\n            {/* <Nav.Link href=\"#home\" className=\"cus-nav-link text-white\" onClick={() => window.scrollTo(0, 0)}>Home</Nav.Link> */}\r\n            {/* <Nav.Link href=\"#animation\" className=\"cus-nav-link\">Animation</Nav.Link> */}\r\n            <Nav.Link href=\"#mint\" className=\"cus-nav-link text-white\">Mint</Nav.Link> \r\n            {/* <Nav.Link href=\"#roadmap\" className=\"cus-nav-link text-white\">Roadmap</Nav.Link> \r\n            <Nav.Link href=\"#faq\" className=\"cus-nav-link text-white\">FAQs</Nav.Link>         */}\r\n            <div className=\"d-flex mx-4 mb-2 mb-md-0 social-link\">                \r\n              <a href=\"https://twitter.com/spellcard050\" target=\"_blank\" className=\"d-flex align-items-center pe-3\" rel=\"noreferrer\">              \r\n                <img src=\"https://img.icons8.com/color/48/000000/twitter--v1.png\" loading=\"lazy\" width=\"32\" alt=\"\"/>\r\n              </a>             \r\n              <a href=\"https://discord.gg/F6wgPQeRjn\" target=\"_blank\" className=\"d-flex align-items-center pe-3\" rel=\"noreferrer\">              \r\n                <img src=\"https://img.icons8.com/color/50/000000/discord--v2.png\" loading=\"lazy\" width=\"32\" alt=\"\"/>\r\n              </a>  \r\n            </div> \r\n          </Nav>                    \r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\nexport default Navigation;","import React from \"react\";\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <div className=\"banner\">\r\n      <img src=\"./images/banner.png\" alt=\"\"/>\r\n    </div>\r\n  );  \r\n};\r\n\r\nexport default Banner;","import React, { useState, useEffect } from \"react\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport { connectWallet, getCurrentWalletConnected } from \"../utils/interact.js\";\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst contractABI = require(\"../contract-abi.json\");\r\nconst contractAddress = \"0x751A9a39AF7E70C37916262644e4D0b8fa018CDE\";\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\nconst contract = new web3.eth.Contract(contractABI, contractAddress);  \r\n\r\nconst mintNFT = async(amount, price) => {  \r\n  const {address} = await getCurrentWalletConnected();\r\n  if (address === \"\") {\r\n    return {\r\n      success: false, \r\n      status: \"❗Please make sure wallet connected.\",           \r\n    }\r\n  }  \r\n  else {      \r\n    contract.methods.mint(amount).send({from: address, gasPrice: 80000000000, gas: 160000*amount, value: (amount * price)})\r\n    .on(\"confirmation\", function () {      \r\n    })\r\n    .on('error', async function (error, receipt) {\r\n      console.log(error);      \r\n    }); \r\n\r\n    return {\r\n      status: \"\",\r\n    }   \r\n    \r\n  }\r\n}    \r\n\r\nconst Mint = () => {\r\n  const [walletAddress, setWallet] = useState(\"\");  \r\n  const [show, setShow] = useState(false);\r\n  const [tokenNumber, setTokenNumber] = useState(1);\r\n  const [status, setStatus] = useState(\"\"); \r\n  const publicsale = true;\r\n  const [supply, setSupply] = useState(0);\r\n\r\n  const handleClose = () => setShow(false);  \r\n  const publicsale_price = 30000000000000000;\r\n\r\n  const handleShow = async () => {  \r\n    setShow(true);   \r\n  };\r\n\r\n  const onMintHandle = () => {       \r\n    setStatus(\"Mint not allowed!\");\r\n  };\r\n\r\n  const decreaseTokenNumber = () => {\r\n    // if (tokenNumber === 1) {\r\n    //   return;\r\n    // }\r\n    // setTokenNumber(tokenNumber - 1);\r\n  }\r\n\r\n  const onMintPressed = async () => {          \r\n    // const { status } = await mintNFT(tokenNumber, publicsale_price); \r\n    //   setStatus(status);         \r\n  };\r\n\r\n  // useEffect(() => {    \r\n  //   async function fetchData() {\r\n  //     const {address} = await getCurrentWalletConnected();      \r\n  //     contract.methods.totalSupply().call().then((_supply) => {        \r\n  //       setSupply(_supply);\r\n  //     }).catch((err) => console.log(err))\r\n  //     setWallet(address);    \r\n  //     addWalletListener(); \r\n  //   }\r\n  //   fetchData();\r\n  // }, []);\r\n\r\n  function addWalletListener() {\r\n    // if (window.ethereum) {\r\n    //   window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n    //     if (accounts.length > 0) {\r\n    //       setWallet(accounts[0]);          \r\n    //     } else {\r\n    //       setWallet(\"\");          \r\n    //     }\r\n    //   });\r\n    // } else {\r\n         \r\n    // }\r\n  } \r\n\r\n  const connectWalletPressed = async () => {\r\n    // const walletResponse = await connectWallet();    \r\n    // setWallet(walletResponse.address);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mint-container purple-text\">\r\n      <div className=\"mint-header text-center text-white pt-5\" id=\"mint\">\r\n        Mint\r\n      </div>\r\n      <div className=\"mint-panel\">\r\n        <div className=\"mint-title pt-4 pt-md-5 text-white\">\r\n          Mint Cards\r\n        </div>\r\n        <div className=\"mint-narration text-white text-center\">\r\n          1 NFT PER WALLET AND MINT PRICE 0.18ETH.\r\n        </div>\r\n        <div className=\"collage mb-5\">\r\n          <img src=\"./images/2.gif\" alt=\"\" width=\"250\" height=\"250\"/>\r\n        </div>\r\n        <div className=\"text-center text-white\">\r\n          <Button className=\"connect-btn mt-3\" onClick={connectWalletPressed}>\r\n            {walletAddress.length > 0 ? (                    \r\n              \"\" +\r\n              String(walletAddress).substring(0, 6) +\r\n              \"...\" +\r\n              String(walletAddress).substring(38)\r\n              ) : (\r\n                <span>Connect</span>\r\n              )\r\n            } \r\n          </Button>\r\n        </div>\r\n        <div className=\"mint-status text-center text-white\">\r\n          {supply} / 50 Sold Out \r\n        </div>\r\n        <div className=\"text-center\">\r\n          <Button className=\"mint-btn mb-3 mb-md-5\" onClick={handleShow}>\r\n            Mint\r\n          </Button>\r\n        </div>\r\n      </div>  \r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Mint some Spell Cards</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <img src=\"./images/2.gif\" alt=\"\" style={{maxWidth: \"220px\"}}/>\r\n          <div className=\"mint-number\">\r\n            {/* <button type=\"button\" onClick={decreaseTokenNumber}><span aria-hidden=\"true\">-</span></button> */}\r\n            <Form>\r\n              <Form.Label>\r\n                {/* { tokenNumber } */}\r\n              </Form.Label>                  \r\n              {status ? <div>{status}</div> \r\n                : <div></div>}\r\n            </Form>                \r\n            {/* {(tokenNumber < 2) ? <button type=\"button\" onClick={() => setTokenNumber(tokenNumber + 1)}><span aria-hidden=\"true\">+</span></button> \r\n              : <button type=\"button\" onClick={() => setTokenNumber(tokenNumber)}><span aria-hidden=\"true\">+</span></button>\r\n            } */}\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          {(!publicsale) ? <Button variant=\"primary\" onClick={onMintHandle}>Mint</Button> \r\n            : <Button variant=\"primary\" onClick={onMintPressed}>Mint</Button>\r\n          }              \r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>               \r\n    </div>\r\n  );  \r\n};\r\n\r\nexport default Mint;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import {Button} from \"react-bootstrap\";\r\n// import { connectWallet, getCurrentWalletConnected } from \"../utils/interact.js\";\r\n\r\n// import Modal from 'react-bootstrap/Modal';\r\n// import Form from 'react-bootstrap/Form';\r\n\r\n// const alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\n// const contractABI = require(\"../contract-abi.json\");\r\n// const contractAddress = \"0x751A9a39AF7E70C37916262644e4D0b8fa018CDE\";\r\n// const { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\n// const web3 = createAlchemyWeb3(alchemyKey);\r\n// const contract = new web3.eth.Contract(contractABI, contractAddress);  \r\n\r\n// const mintNFT = async(amount, price) => {  \r\n//   const {address} = await getCurrentWalletConnected();\r\n//   if (address === \"\") {\r\n//     return {\r\n//       success: false, \r\n//       status: \"❗Please make sure wallet connected.\",           \r\n//     }\r\n//   }  \r\n//   else {      \r\n//     contract.methods.mint(amount).send({from: address, gasPrice: 80000000000, gas: 160000*amount, value: (amount * price)})\r\n//     .on(\"confirmation\", function () {      \r\n//     })\r\n//     .on('error', async function (error, receipt) {\r\n//       console.log(error);      \r\n//     }); \r\n\r\n//     return {\r\n//       status: \"\",\r\n//     }   \r\n    \r\n//   }\r\n// }    \r\n\r\n// const Mint = () => {\r\n//   const [walletAddress, setWallet] = useState(\"\");  \r\n//   const [show, setShow] = useState(false);\r\n//   const [tokenNumber, setTokenNumber] = useState(1);\r\n//   const [status, setStatus] = useState(\"\"); \r\n//   const publicsale = true;\r\n//   const [supply, setSupply] = useState(0);\r\n\r\n//   const handleClose = () => setShow(false);  \r\n//   const publicsale_price = 30000000000000000;\r\n\r\n//   const handleShow = async () => {  \r\n//     setShow(true);   \r\n//   };\r\n\r\n//   const onMintHandle = () => {       \r\n//     setStatus(\"Mint not allowed!\");\r\n//   };\r\n\r\n  // const decreaseTokenNumber = () => {\r\n  //   if (tokenNumber === 1) {\r\n  //     return;\r\n  //   }\r\n  //   setTokenNumber(tokenNumber - 1);\r\n  // }\r\n\r\n//   const onMintPressed = async () => {          \r\n//     const { status } = await mintNFT(tokenNumber, publicsale_price); \r\n//       setStatus(status);         \r\n//   };\r\n\r\n//   useEffect(() => {    \r\n//     async function fetchData() {\r\n//       const {address} = await getCurrentWalletConnected();      \r\n//       contract.methods.totalSupply().call().then((_supply) => {        \r\n//         setSupply(_supply);\r\n//       }).catch((err) => console.log(err))\r\n//       setWallet(address);    \r\n//       addWalletListener(); \r\n//     }\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   function addWalletListener() {\r\n//     if (window.ethereum) {\r\n//       window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n//         if (accounts.length > 0) {\r\n//           setWallet(accounts[0]);          \r\n//         } else {\r\n//           setWallet(\"\");          \r\n//         }\r\n//       });\r\n//     } else {\r\n         \r\n//     }\r\n//   } \r\n\r\n//   const connectWalletPressed = async () => {\r\n//     const walletResponse = await connectWallet();    \r\n//     setWallet(walletResponse.address);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"mint-container purple-text\">\r\n//       <div className=\"mint-header text-center text-white pt-5\" id=\"mint\">\r\n//         Mint\r\n//       </div>\r\n//       <div className=\"mint-panel\">\r\n//         <div className=\"mint-title pt-4 pt-md-5 text-white\">\r\n//           Mint Cards\r\n//         </div>\r\n//         <div className=\"mint-narration text-white\">\r\n//           Get you own crazy, funky, funny, Spell Card here. \r\n//           They are here to make people laugh after the pandemic and have a fun time within the communtiy. \r\n//           Our main goal is to find each of these Spell Cards a owner where they will battle it out between who is the most dirty out of all of them.\r\n//         </div>\r\n//         <div className=\"collage mb-5\">\r\n//           <img src=\"./images/2.gif\" alt=\"\" width=\"300\" height=\"300\"/>\r\n//         </div>\r\n//         <div className=\"mint-price text-white mt-5 text-center\">\r\n//           Max per Tx 20<br />\r\n//           Only 0.03 Eth Each\r\n//         </div>\r\n//         <div className=\"text-center text-white\">\r\n//           <Button className=\"connect-btn mt-3\" onClick={connectWalletPressed}>\r\n//             {walletAddress.length > 0 ? (                    \r\n//               \"\" +\r\n//               String(walletAddress).substring(0, 6) +\r\n//               \"...\" +\r\n//               String(walletAddress).substring(38)\r\n//               ) : (\r\n//                 <span>Connect</span>\r\n//               )\r\n//             } \r\n//           </Button>\r\n//         </div>\r\n//         <div className=\"mint-status text-center text-white\">\r\n//           {supply} / 9999 Sold Out \r\n//         </div>\r\n//         <div className=\"text-center\">\r\n//           <Button className=\"mint-btn mb-3 mb-md-5\" onClick={handleShow}>\r\n//             Mint\r\n//           </Button>\r\n//         </div>\r\n//       </div>  \r\n//       <Modal show={show} onHide={handleClose}>\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>Mint some Spell Cards</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Modal.Body>\r\n//           <img src=\"./images/ALL GIF.gif\" alt=\"\" style={{maxWidth: \"220px\"}}/>\r\n//           <div className=\"mint-number\">\r\n//             <button type=\"button\" onClick={decreaseTokenNumber}><span aria-hidden=\"true\">-</span></button>\r\n//             <Form>\r\n//               <Form.Label>\r\n//                 { tokenNumber }\r\n//               </Form.Label>                  \r\n//               {status ? <div>{status}</div> \r\n//                 : <div></div>}\r\n//             </Form>                \r\n//             {(tokenNumber < 20) ? <button type=\"button\" onClick={() => setTokenNumber(tokenNumber + 1)}><span aria-hidden=\"true\">+</span></button> \r\n//               : <button type=\"button\" onClick={() => setTokenNumber(tokenNumber)}><span aria-hidden=\"true\">+</span></button>\r\n//             }\r\n//           </div>\r\n//         </Modal.Body>\r\n//         <Modal.Footer>\r\n//           {(!publicsale) ? <Button variant=\"primary\" onClick={onMintHandle}>Mint</Button> \r\n//             : <Button variant=\"primary\" onClick={onMintPressed}>Mint</Button>\r\n//           }              \r\n//           <Button variant=\"secondary\" onClick={handleClose}>\r\n//             Close\r\n//           </Button>\r\n//         </Modal.Footer>\r\n//       </Modal>               \r\n//     </div>\r\n//   );  \r\n// };\r\n\r\n// export default Mint;","import { Fragment } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navigation from './components/nabvar';\nimport Banner from './components/banner';\nimport Mint from './components/mint';\n// import Roadmap from './components/roadmap';\n// import FAQ from './components/faq';\nimport Animation from './components/animation';\nimport './styles/navbar.css';\nimport './styles/main.css';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Navigation />\n      <Banner />\n      <Mint />\n      {/* <Animation /> */}\n      {/* <Roadmap /> */}\n      {/* <FAQ /> */}\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}