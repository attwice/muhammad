{"version":3,"sources":["components/nabvar.js","components/banner.js","components/mint1.js","utils/walletmodal.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","useState","sticky","setSticky","useEffect","window","addEventListener","handleScroll","scrollY","className","Navbar","variant","expand","style","backgroundColor","Brand","href","Nav","Link","onClick","scrollTo","src","alt","Toggle","aria-controls","Collapse","id","target","rel","loading","width","Banner","alchemyKey","process","contractABI","require","contractAddress","createAlchemyWeb3","Mint1","walletAddress","setWallet","supply","setSupply","show","setShow","handleClose","handleShow","a","setLoading","getweb3","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","qrcodeModalOptions","mobileLinks","web3Modal","Web3Modal","network","cacheProvider","connect","provider","on","accounts","console","log","chainId","info","error","web3","Web3","Walletmodel","web3Loading","setMyWeb3","then","response","eth","getAccounts","result","mintNFT","price","state","success","status","contract","Contract","_amountOfEther","utils","toWei","toBN","methods","publicsaleSpellCard","send","from","gas","value","totalSupply","call","_supply","catch","err","fetchData","height","Button","length","String","substring","Modal","onHide","Header","closeButton","Title","Body","maxWidth","Form","Label","Footer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.767b061a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Navbar,\r\n  Nav \r\n} from \"react-bootstrap\";\r\n \r\nconst Navigation = () => { \r\n  const [sticky, setSticky] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n  }, []);\r\n\r\n  const handleScroll = () => {\r\n    if (window.scrollY >= 86) {\r\n      setSticky(true);\r\n    } else if (window.scrollY < 85) {\r\n      setSticky(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`header${sticky ? ' sticky' : ''}`}>\r\n      <Navbar variant=\"dark\" expand=\"md\" style={{backgroundColor: '#333333'}}>\r\n        <Navbar.Brand href=\"/\" className=\"px-4\">\r\n          \r\n          <Nav.Link href=\"#home\" className=\"cus-nav-link text-white\" onClick={() => window.scrollTo(0, 0)}><img src=\"./images/logo.png\" className=\"logo-img\" alt=\"\"/></Nav.Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" className=\"mx-4\"/>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\" className=\"d-md-flex justify-content-between\">\r\n          <Nav className=\"mr-auto flex-grow-1\">                               \r\n            {/* <Nav.Link href=\"#home\" className=\"cus-nav-link text-white\" onClick={() => window.scrollTo(0, 0)}>Home</Nav.Link> */}\r\n            {/* <Nav.Link href=\"#animation\" className=\"cus-nav-link\">Animation</Nav.Link> */}\r\n            <Nav.Link href=\"#mint\" className=\"cus-nav-link text-white\">Mint</Nav.Link> \r\n            {/* <Nav.Link href=\"#roadmap\" className=\"cus-nav-link text-white\">Roadmap</Nav.Link> \r\n            <Nav.Link href=\"#faq\" className=\"cus-nav-link text-white\">FAQs</Nav.Link>         */}\r\n            <div className=\"d-flex mx-4 mb-2 mb-md-0 social-link\">                \r\n              <a href=\"https://twitter.com/spellcard050\" target=\"_blank\" className=\"d-flex align-items-center pe-3\" rel=\"noreferrer\">              \r\n                <img src=\"https://img.icons8.com/color/48/000000/twitter--v1.png\" loading=\"lazy\" width=\"32\" alt=\"\"/>\r\n              </a>             \r\n              <a href=\"https://discord.gg/F6wgPQeRjn\" target=\"_blank\" className=\"d-flex align-items-center pe-3\" rel=\"noreferrer\">              \r\n                <img src=\"https://img.icons8.com/color/50/000000/discord--v2.png\" loading=\"lazy\" width=\"32\" alt=\"\"/>\r\n              </a>  \r\n            </div> \r\n          </Nav>                    \r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\nexport default Navigation;","import React from \"react\";\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <div className=\"banner\">\r\n      <img src=\"./images/banner.png\" alt=\"\"/>\r\n    </div>\r\n  );  \r\n};\r\n\r\nexport default Banner;","import { useState, useEffect } from \"react\";\r\nimport Walletmodel from \"../utils/walletmodal.js\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst contractABI = require(\"../SC.json\");\r\nconst contractAddress = \"0x510a9f432e130f5e2742178ccd4bc981cbf38953\";\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\n\r\nexport default function Mint1() {\r\n  const [walletAddress, setWallet] = useState(\"\");  \r\n  const [supply, setSupply] = useState(0);\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = async () => {\r\n    setShow(true);\r\n  };\r\n\r\n  const { web3Loading, getweb3 } = Walletmodel();\r\n  const [web3, setMyWeb3] = useState();\r\n  async function connectWallet() {\r\n    await getweb3().then((response) => {\r\n      setMyWeb3(response);\r\n      response.eth.getAccounts().then((result) => {\r\n        setWallet(result[0]);\r\n        console.log(web3Loading);\r\n      });\r\n    });\r\n  };\r\n\r\n  const mintNFT = async (price, state) => {\r\n    if (walletAddress === \"\") {\r\n      return {\r\n        success: false,\r\n        status: \"Please make sure wallet connected!\",\r\n      }\r\n    }\r\n    else {\r\n      const contract = new web3.eth.Contract(contractABI, contractAddress);\r\n      const _amountOfEther = web3.utils.toWei(web3.utils.toBN(price), 'ether') / web3.utils.toBN(100);\r\n      const gaslimit = 130000;\r\n      if (state === true) {\r\n        contract.methods.publicsaleSpellCard().send({ from: walletAddress, gas: gaslimit, value: _amountOfEther })\r\n          // contract.methods.mint(amount).send({from: walletAddress, gas: gaslimit, value: _amountOfEther})\r\n          .on(\"confirmation\", function () {\r\n          })\r\n          .on('error', async function (error) {\r\n            console.log(error);\r\n          });\r\n      } else {\r\n        \r\n      }\r\n\r\n      return {\r\n        status: \"\",\r\n      }\r\n    }\r\n  }\r\n  \r\n  const publicsaleState = true;\r\n  const publicsalePrice = 18;  \r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const web3 = createAlchemyWeb3(alchemyKey);\r\n      const contract = new web3.eth.Contract(contractABI, contractAddress);\r\n      contract.methods.totalSupply().call().then((_supply) => {\r\n        setSupply(_supply);\r\n      }).catch((err) => console.log(err))\r\n    }\r\n    fetchData();\r\n  });\r\n\r\n  return (\r\n    <div className=\"mint-container purple-text\">\r\n      <div className=\"mint-header text-center text-white pt-5\" id=\"mint\">\r\n        Mint\r\n      </div>\r\n      <div className=\"mint-panel\">\r\n        <div className=\"mint-title pt-4 pt-md-5 text-white\">\r\n          Mint Cards\r\n        </div>\r\n        <div className=\"mint-narration text-white text-center\">\r\n          1 NFT PER WALLET AND MINT PRICE 0.18ETH.\r\n        </div>\r\n        <div className=\"collage mb-5\">\r\n          <img src=\"./images/2.gif\" alt=\"\" width=\"250\" height=\"250\" />\r\n        </div>\r\n        <div className=\"text-center text-white\">\r\n          <Button className=\"connect-btn mt-3\" onClick={connectWallet}>\r\n            {walletAddress.length > 0 ? (\r\n              \"\" +\r\n              String(walletAddress).substring(0, 6) +\r\n              \"...\" +\r\n              String(walletAddress).substring(38)\r\n            ) : (\r\n              \"Connect\"\r\n            )\r\n            }\r\n          </Button>\r\n        </div>\r\n        <div className=\"mint-status text-center text-white\">\r\n          {supply} / 50 Sold Out\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <Button className=\"mint-btn mb-3 mb-md-5\" onClick={handleShow}>Mint</Button> :\r\n        </div>\r\n        <Modal show={show} onHide={handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Mint some Spell Cards</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <img src=\"./images/2.gif\" alt=\"\" style={{ maxWidth: \"220px\" }} />\r\n            <div className=\"mint-number\">\r\n              {/* <button type=\"button\" onClick={decreaseTokenNumber}><span aria-hidden=\"true\">-</span></button> */}\r\n              <Form>\r\n                <Form.Label>\r\n                  {/* { tokenNumber } */}\r\n                </Form.Label>\r\n                {/* {status ? <div>{status}</div>\r\n                  : <div></div>} */}\r\n              </Form>\r\n              {/* {(tokenNumber < 2) ? <button type=\"button\" onClick={() => setTokenNumber(tokenNumber + 1)}><span aria-hidden=\"true\">+</span></button> \r\n              : <button type=\"button\" onClick={() => setTokenNumber(tokenNumber)}><span aria-hidden=\"true\">+</span></button>\r\n            } */}\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={() => { mintNFT(publicsalePrice, publicsaleState) }}>Mint</Button>             \r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport {useState} from \"react\";\n\nexport default function Walletmodel() {\n  const [loading, setLoading] = useState(false);\n  return {\n    get web3Loading() {\n      return loading\n    },\n    async getweb3() {\n      setLoading(true);      \n      const providerOptions = {\n        // metamask: {\n        //   id: 'injected',\n        //   name: 'MetaMask',\n        //   type: 'injected',\n        //   check: 'isMetaMask'\n        // },\n        walletconnect: {\n          package: WalletConnectProvider, // required\n          options: {\n            infuraId: '8017fee489474239bae3738e3dbb457d', // Required\n            // network: 'rinkeby',\n            qrcodeModalOptions: {\n              mobileLinks: [\n              'rainbow',\n              'metamask',\n              'argent',\n              'trust',\n              'imtoken',\n              'pillar'\n              ]\n            }\n          }\n        } \n      };\n      const web3Modal = new Web3Modal({\n        network: 'mainnet',\n        cacheProvider: true,\n        providerOptions\n      });\n      const provider = await web3Modal.connect();      \n      // Subscribe to accounts change\n      provider.on(\"accountsChanged\", (accounts) => {\n        console.log(accounts);\n      });\n\n      // Subscribe to chainId change\n      provider.on(\"chainChanged\", (chainId) => {\n        console.log(chainId);\n      });\n\n      // Subscribe to provider connection\n      provider.on(\"connect\", (info) => {\n        console.log(info);\n      });\n\n      // Subscribe to provider disconnection\n      provider.on(\"disconnect\", (error) => {\n        console.log(error);\n      });\n      const web3 = new Web3(provider);\n      setLoading(false);\n      return web3;\n    }\n  }\n}","import { Fragment } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navigation from './components/nabvar';\nimport Banner from './components/banner';\n// import Mint from './components/mint';\n// import Roadmap from './components/roadmap';\n// import FAQ from './components/faq';\n// import Animation from './components/animation';\nimport './styles/navbar.css';\nimport './styles/main.css';\nimport Mint1 from './components/mint1';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Navigation />\n      <Banner />\n      <Mint1 />\n      {/* <Mint /> */}\n      {/* <Animation /> */}\n      {/* <Roadmap /> */}\n      {/* <FAQ /> */}\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}