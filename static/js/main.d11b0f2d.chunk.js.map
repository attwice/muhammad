{"version":3,"sources":["components/nabvar.js","components/banner.js","utils/interact.js","components/mint.js","utils/walletmodal.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","useState","sticky","setSticky","useEffect","window","addEventListener","handleScroll","scrollY","className","Navbar","variant","expand","style","backgroundColor","Brand","href","Nav","Link","onClick","scrollTo","src","alt","Toggle","aria-controls","Collapse","id","target","rel","loading","width","Banner","getCurrentWalletConnected","a","ethereum","request","method","addressArray","length","address","contractABI","require","contract","createAlchemyWeb3","process","eth","Contract","mintNFT","amount","price","success","status","methods","mint","send","from","gasPrice","gas","value","on","error","receipt","console","log","Mint","walletAddress","setWallet","show","setShow","tokenNumber","setStatus","supply","setSupply","handleClose","handleShow","onMintPressed","addWalletListener","accounts","totalSupply","call","then","_supply","catch","err","fetchData","setLoading","getweb3","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","qrcodeModalOptions","mobileLinks","web3Modal","Web3Modal","network","cacheProvider","connect","provider","chainId","info","web3","Web3","Walletmodel","web3Loading","setMyWeb3","response","getAccounts","result","height","Button","String","substring","Modal","onHide","Header","closeButton","Title","Body","maxWidth","Form","Label","Footer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d11b0f2d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Navbar,\r\n  Nav \r\n} from \"react-bootstrap\";\r\n \r\nconst Navigation = () => { \r\n  const [sticky, setSticky] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n  }, []);\r\n\r\n  const handleScroll = () => {\r\n    if (window.scrollY >= 86) {\r\n      setSticky(true);\r\n    } else if (window.scrollY < 85) {\r\n      setSticky(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`header${sticky ? ' sticky' : ''}`}>\r\n      <Navbar variant=\"dark\" expand=\"md\" style={{backgroundColor: '#333333'}}>\r\n        <Navbar.Brand href=\"/\" className=\"px-4\">\r\n          \r\n          <Nav.Link href=\"#home\" className=\"cus-nav-link text-white\" onClick={() => window.scrollTo(0, 0)}><img src=\"./images/logo.png\" className=\"logo-img\" alt=\"\"/></Nav.Link>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" className=\"mx-4\"/>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\" className=\"d-md-flex justify-content-between\">\r\n          <Nav className=\"mr-auto flex-grow-1\">                               \r\n            {/* <Nav.Link href=\"#home\" className=\"cus-nav-link text-white\" onClick={() => window.scrollTo(0, 0)}>Home</Nav.Link> */}\r\n            {/* <Nav.Link href=\"#animation\" className=\"cus-nav-link\">Animation</Nav.Link> */}\r\n            <Nav.Link href=\"#mint\" className=\"cus-nav-link text-white\">Mint</Nav.Link> \r\n            {/* <Nav.Link href=\"#roadmap\" className=\"cus-nav-link text-white\">Roadmap</Nav.Link> \r\n            <Nav.Link href=\"#faq\" className=\"cus-nav-link text-white\">FAQs</Nav.Link>         */}\r\n            <div className=\"d-flex mx-4 mb-2 mb-md-0 social-link\">                \r\n              <a href=\"https://twitter.com/spellcard050\" target=\"_blank\" className=\"d-flex align-items-center pe-3\" rel=\"noreferrer\">              \r\n                <img src=\"https://img.icons8.com/color/48/000000/twitter--v1.png\" loading=\"lazy\" width=\"32\" alt=\"\"/>\r\n              </a>             \r\n              <a href=\"https://discord.gg/F6wgPQeRjn\" target=\"_blank\" className=\"d-flex align-items-center pe-3\" rel=\"noreferrer\">              \r\n                <img src=\"https://img.icons8.com/color/50/000000/discord--v2.png\" loading=\"lazy\" width=\"32\" alt=\"\"/>\r\n              </a>  \r\n            </div> \r\n          </Nav>                    \r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\nexport default Navigation;","import React from \"react\";\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <div className=\"banner\">\r\n      <img src=\"./images/banner.png\" alt=\"\"/>\r\n    </div>\r\n  );  \r\n};\r\n\r\nexport default Banner;","export const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const obj = {          \r\n          address: addressArray[0],\r\n        };\r\n        return obj;\r\n      } catch (err) {\r\n        alert(err.message);\r\n        return {        \r\n          address: \"\",                \r\n        };\r\n      }\r\n    } else {\r\n      alert(\"Metamask is not installed!\");\r\n      return {\r\n        address: \"\",        \r\n      };\r\n    }\r\n  };\r\n  \r\n  export const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        if (addressArray.length > 0) {\r\n          return {\r\n            address: addressArray[0],            \r\n          };\r\n        } else {\r\n          return {\r\n            address: \"\",            \r\n          };\r\n        }\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",          \r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",        \r\n      };\r\n    }\r\n  };\r\n  \r\n  ","import React, { useState, useEffect } from \"react\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport { getCurrentWalletConnected } from \"../utils/interact.js\";\r\nimport Walletmodel from \"../utils/walletmodal.js\";\r\n\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst contractABI = require(\"../contract-abi.json\");\r\nconst contractAddress = \"0x751A9a39AF7E70C37916262644e4D0b8fa018CDE\";\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\nconst contract = new web3.eth.Contract(contractABI, contractAddress);  \r\n\r\nconst mintNFT = async(amount, price) => {  \r\n  const {address} = await getCurrentWalletConnected();\r\n  if (address === \"\") {\r\n    return {\r\n      success: false, \r\n      status: \"❗Please make sure wallet connected.\",           \r\n    }\r\n  }  \r\n  else {      \r\n    contract.methods.mint(amount).send({from: address, gasPrice: 80000000000, gas: 160000*amount, value: (amount * price)})\r\n    .on(\"confirmation\", function () {      \r\n    })\r\n    .on('error', async function (error, receipt) {\r\n      console.log(error);      \r\n    }); \r\n\r\n    return {\r\n      status: \"\",\r\n    }   \r\n    \r\n  }\r\n}    \r\n\r\nconst Mint = () => {\r\n  const [walletAddress, setWallet] = useState(\"\");  \r\n  const [show, setShow] = useState(false);\r\n  const [tokenNumber, setTokenNumber] = useState(1);\r\n  const [status, setStatus] = useState(\"\"); \r\n  const publicsale = true;\r\n  const [supply, setSupply] = useState(0);\r\n\r\n  const handleClose = () => setShow(false);  \r\n  const publicsale_price = 180000000000000000;\r\n\r\n  const handleShow = async () => {  \r\n    setShow(true);   \r\n  };\r\n\r\n  const onMintHandle = () => {       \r\n    setStatus(\"Mint not allowed!\");\r\n  };\r\n\r\n  const onMintPressed = async () => {          \r\n    const { status } = await mintNFT(tokenNumber, publicsale_price); \r\n      setStatus(status);         \r\n  };\r\n\r\n  useEffect(() => {    \r\n    async function fetchData() {\r\n      const {address} = await getCurrentWalletConnected();      \r\n      contract.methods.totalSupply().call().then((_supply) => {        \r\n        setSupply(_supply);\r\n      }).catch((err) => console.log(err))\r\n      setWallet(address);    \r\n      addWalletListener(); \r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);          \r\n        } else {\r\n          setWallet(\"\");          \r\n        }\r\n      });\r\n    } else {\r\n         \r\n    }\r\n  } \r\n\r\n  // const connectWalletPressed = async () => {\r\n  //   const walletResponse = await connectWallet();    \r\n  //   setWallet(walletResponse.address);\r\n  // };\r\n  const {web3Loading, getweb3} = Walletmodel ();\r\n  const [web3, setMyWeb3] = useState ();\r\n  async function connectWallet () {\r\n    await getweb3 ().then((response) => {\r\n      setMyWeb3 (response);      \r\n      response.eth.getAccounts().then ((result) => {\r\n        setWallet(result[0]);\r\n        console.log (web3Loading);        \r\n      });\r\n    });\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"mint-container purple-text\">\r\n      <div className=\"mint-header text-center text-white pt-5\" id=\"mint\">\r\n        Mint\r\n      </div>\r\n      <div className=\"mint-panel\">\r\n        <div className=\"mint-title pt-4 pt-md-5 text-white\">\r\n          Mint Cards\r\n        </div>\r\n        <div className=\"mint-narration text-white text-center\">\r\n          1 NFT PER WALLET AND MINT PRICE 0.18ETH.\r\n        </div>\r\n        <div className=\"collage mb-5\">\r\n          <img src=\"./images/2.gif\" alt=\"\" width=\"250\" height=\"250\"/>\r\n        </div>\r\n        <div className=\"text-center text-white\">\r\n          <Button className=\"connect-btn mt-3\" onClick={connectWallet}>\r\n            {walletAddress.length > 0 ? (                    \r\n              \"\" +\r\n              String(walletAddress).substring(0, 6) +\r\n              \"...\" +\r\n              String(walletAddress).substring(38)\r\n              ) : (\r\n                <span>Connect</span>\r\n              )\r\n            } \r\n          </Button>\r\n        </div>\r\n        <div className=\"mint-status text-center text-white\">\r\n          {supply} / 50 Sold Out \r\n        </div>\r\n        <div className=\"text-center\">\r\n          <Button className=\"mint-btn mb-3 mb-md-5\" onClick={handleShow}>\r\n            Mint\r\n          </Button>\r\n        </div>\r\n      </div>  \r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Mint some Spell Cards</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <img src=\"./images/2.gif\" alt=\"\" style={{maxWidth: \"220px\"}}/>\r\n          <div className=\"mint-number\">\r\n            {/* <button type=\"button\" onClick={decreaseTokenNumber}><span aria-hidden=\"true\">-</span></button> */}\r\n            <Form>\r\n              <Form.Label>\r\n                {/* { tokenNumber } */}\r\n              </Form.Label>                  \r\n              {status ? <div>{status}</div> \r\n                : <div></div>}\r\n            </Form>                \r\n            {/* {(tokenNumber < 2) ? <button type=\"button\" onClick={() => setTokenNumber(tokenNumber + 1)}><span aria-hidden=\"true\">+</span></button> \r\n              : <button type=\"button\" onClick={() => setTokenNumber(tokenNumber)}><span aria-hidden=\"true\">+</span></button>\r\n            } */}\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          {(!publicsale) ? <Button variant=\"primary\" onClick={onMintHandle}>Mint</Button> \r\n            : <Button variant=\"primary\" onClick={onMintPressed}>Mint</Button>\r\n          }              \r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>               \r\n    </div>\r\n  );  \r\n};\r\n\r\nexport default Mint;","import Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport {useState} from \"react\";\n\nexport default function Walletmodel() {\n  const [loading, setLoading] = useState(false);\n  return {\n    get web3Loading() {\n      return loading\n    },\n    async getweb3() {\n      setLoading(true);      \n      const providerOptions = {\n        // metamask: {\n        //   id: 'injected',\n        //   name: 'MetaMask',\n        //   type: 'injected',\n        //   check: 'isMetaMask'\n        // },\n        walletconnect: {\n          package: WalletConnectProvider, // required\n          options: {\n            infuraId: '8017fee489474239bae3738e3dbb457d', // Required\n            // network: 'rinkeby',\n            qrcodeModalOptions: {\n              mobileLinks: [\n              'rainbow',\n              'metamask',\n              'argent',\n              'trust',\n              'imtoken',\n              'pillar'\n              ]\n            }\n          }\n        } \n      };\n      const web3Modal = new Web3Modal({\n        network: 'mainnet',\n        cacheProvider: true,\n        providerOptions\n      });\n      const provider = await web3Modal.connect();      \n      // Subscribe to accounts change\n      provider.on(\"accountsChanged\", (accounts) => {\n        console.log(accounts);\n      });\n\n      // Subscribe to chainId change\n      provider.on(\"chainChanged\", (chainId) => {\n        console.log(chainId);\n      });\n\n      // Subscribe to provider connection\n      provider.on(\"connect\", (info) => {\n        console.log(info);\n      });\n\n      // Subscribe to provider disconnection\n      provider.on(\"disconnect\", (error) => {\n        console.log(error);\n      });\n      const web3 = new Web3(provider);\n      setLoading(false);\n      return web3;\n    }\n  }\n}","import { Fragment } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navigation from './components/nabvar';\nimport Banner from './components/banner';\nimport Mint from './components/mint';\n// import Roadmap from './components/roadmap';\n// import FAQ from './components/faq';\n// import Animation from './components/animation';\nimport './styles/navbar.css';\nimport './styles/main.css';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Navigation />\n      <Banner />\n      <Mint />\n      {/* <Animation /> */}\n      {/* <Roadmap /> */}\n      {/* <FAQ /> */}\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}